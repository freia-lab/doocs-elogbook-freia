#!/bin/sh
#
# This script is listening on a name pipe and creates a JPEG preview of any supported
# graphics type plus a XML metafile (holding names and dates, etc.). All files are moved
# to the datapath parsed from the elogbook configuration file.
#

cd `dirname $0`

# Parameters for image creation control
THUMB="jpg"
FACTOR="-geometry 600x500>"
FACTOR_2="-geometry 500x300>"
FACTOR_4="-geometry 200x100>"
CROP="-trim"

# Load enviroment for convert etc.
../elogbook/bin/elogenv.sh

# printer pipe name
PIPE=`../elogbook/bin/GetXMLElement printer jsp/conf.xml`
# DocumentRoot of the server
DOCROOT=`../elogbook/bin/GetXMLElement docroot jsp/conf.xml`
# Path to elogbook rel. DocumentRoot
LOGROOT=`../elogbook/bin/GetXMLElement logroot jsp/conf.xml`
# Path to elogbook data directory (rel. to logroot)
DATAPATH=`../elogbook/bin/GetXMLElement datapath jsp/conf.xml`
# The elog root dir
LOGB_DIR=${DOCROOT}${LOGROOT}
# dir for tmp files
WORK=work

# convert postscript file to THUMB (see defintion on top)
convert_files() {
  NFILES=`grep %%Pages: ./${WORK}/$entry.ps | cut -f2 -d: | tail -1`
  echo "  Number of pages: $NFILES"
  # More than two images -> scaling 1/4 x 1/4
  if test ${NFILES:=0} -gt 2 ; then
    convert $CROP $FACTOR  $1 ./${WORK}/$entry.ps ./${WORK}/$entry-%02d.${THUMB}
    for JPGFILE  in `ls ./${WORK}/$entry-*.${THUMB}` ; do
      BASEFILE=`basename $JPGFILE`
      convert $CROP $FACTOR_4  $JPGFILE $JPGFILE
      echo "<file>$BASEFILE</file>" >> ./${WORK}/$entry.xml
    done
  # More than one image -> scaling 1/2 x 1/2
  elif test ${NFILES:=0} -gt 1 ; then
    convert $CROP $FACTOR  $1 ./${WORK}/$entry.ps ./${WORK}/$zeit-%02d.${THUMB}
    for JPGFILE  in `ls ./${WORK}/$entry-*.${THUMB}` ; do
      BASEFILE=`basename $JPGFILE`
      convert $CROP $FACTOR_2  $JPGFILE $JPGFILE
      echo "<file>$BASEFILE</file>" >> ./${WORK}/$entry.xml
    done
  # Only one image -> scaling 1/1 x 1/1
  else
    if test  "Xtrue" != "X$XPRINT" ; then
      convert $CROP $FACTOR  $1 ./${WORK}/$entry.ps ./${WORK}/$zeit-%02d.${THUMB}
      echo "convert $CROP $FACTOR  $1 ./${WORK}/$entry.ps ./${WORK}/$zeit-%02d.${THUMB}"
      echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    else
      echo "    Created by xprint (600x600 dpi)"
      convert $CROP $FACTOR  -density 600x600  $1 ./${WORK}/$entry.ps ./${WORK}/$zeit-%02d.${THUMB}
      echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    fi
  fi
}

deploy_files(){
  echo "  Moving files to data path ..."
  for EXT in xml ps ${THUMB} JPG; do
    if test -f ${WORK}/$entry.${EXT}; then
      mv ${WORK}/${entry}*.${EXT} ${SHIFTABS}
      echo "    moved ${entry}*.${EXT} to ${SHIFTABS}"
    fi
  done
  echo "  done moving files."
}

# main loop
echo "START of $0 for $PIPE - `date`"
echo " Thumbnail format is ${THUMB}"
runloop ()
{
while { $TRUE;} do
  cd $LOGB_DIR
  # listen at the pipe until data arrives
  cat < /var/www/pipes/${PIPE} > ./logbook-in;
  echo "FILE REACHED - `date`"

  # current actual shift data path
  ACT_DIR=`../elogbook/bin/GetXMLElement act_dir jsp/work.xml`
  SHIFTABS=${LOGB_DIR}${DATAPATH}${ACT_DIR}

  # get the author, host and title, which are generated by the
  # script /etc/lp/interfaces/"PRINTER"
  if test -f /etc/lp/interfaces/${PIPE}-user.txt ; then
    STRING=`cat /etc/lp/interfaces/${PIPE}-user.txt`
    AUTHOR=`echo $STRING | cut -f1 -d@`
    LPHOST=`echo $STRING | cut -f2 -d@`
  else
    echo "  Warning: File /etc/lp/interfaces/${PIPE}-user.txt does not exist"
    AUTHOR="PrintMeta"
    LPHOST="unknown"
  fi
  
  if test -f /etc/lp/interfaces/${PIPE}-title.txt ; then
    TSTRING=`head -n 1 /etc/lp/interfaces/${PIPE}-title.txt`
    if  test "Xstandard input" = "X$TSTRING"  ; then
      TSTRING="" # set to NULL string	
    fi
  else
    echo "  Warning: File /etc/lp/interfaces/${PIPE}-title.txt does not exist"
    TSTRING="" # set to NULL string
  fi
  taildone=0

  # Used for file name (format: 2003-05-06T18:30:00-00)
  zeit=`date '+%Y-%m-%dT%H:%M:%S'`
  entry=${zeit}-00
  uhr=`date '+%H:%M:%S'`
  isodate=`date '+%Y-%m-%d'`

  LPerror=`head -n 1 ./logbook-in`

  # This test coudln't handle a variable banner size
  if  test "X#####" = "X$LPerror"; then
    tail +20 ./logbook-in > ./logbook-lpr
    taildone=1
  else
    cp -p ./logbook-in ./logbook-lpr
  fi
		
  # remove "^D" character (first one)  from file
  if test $taildone = 0; then
    tail -c +1 ./logbook-lpr > ./logbook-tail
  else
    mv ./logbook-lpr ./logbook-tail
  fi
  HPerror=`head -n 1 ./logbook-tail`

  # avoid files created/printed from a WINDOWS PC with
  # HP printer driver
  if  test "X%-12345X@PJL JOB" = "X$HPerror"  ; then
    echo "  Windows File created with HP driver"
    i=2
    tail +$i ./logbook-tail > ./logbook-tmp
    PSHEAD=`head -n 1 ./logbook-tmp | cut -c1-4`
    while ( test "%!PS" != $PSHEAD ) do
      i=`expr $i + 1`
      tail +$i ./logbook-tail > ./logbook-tmp
      PSHEAD=`head -n 1 ./logbook-tmp | cut -c1-4`
    done
    taildone=1
  else
    mv ./logbook-tail ./logbook-tmp
  fi
  
  # check for Postscript or Ascii file
  SW=`file logbook-tmp | cut -f2 -d: | cut -f2 -d' '`
  echo "  File format is: $SW"
  if test "text" = $SW || test "English" = $SW || test "ASCII" = $SW ; then
    SW="ascii"
  fi

  # create .xml file, the closing tag for <text> must be
  # in every elif statement
  touch ./${WORK}/$entry.xml
  echo "<author>$AUTHOR</author>" >> ./${WORK}/$entry.xml
  echo "<category>USERLOG</category>" >> ./${WORK}/$entry.xml
  if test "x$TSTRING" = "x" ;then
    echo "<title>from: $LPHOST</title>" >> ./${WORK}/$entry.xml
  else
    echo "<title>$TSTRING</title>" >> ./${WORK}/$entry.xml
  fi
  echo "<isodate>$isodate</isodate>" >> ./${WORK}/$entry.xml
  echo "<time>$uhr</time>" >> ./${WORK}/$entry.xml
  echo "<severity>NONE</severity>" >> ./${WORK}/$entry.xml
  echo "<keywords></keywords>" >> ./${WORK}/$entry.xml
  echo "<location></location>" >> ./${WORK}/$entry.xml
  if test "ascii" = $SW || test "English" = $SW ; then
    echo "<metainfo>$entry.xml</metainfo>" >> ./${WORK}/$entry.xml
  else
    echo "<metainfo>$entry.xml</metainfo>" >> ./${WORK}/$entry.xml
  fi
  
  ########################################
  # ASCII file
  if test "ascii" = $SW || test "English" = $SW ; then
    # insert the actual text
    # tr needed to remove all control chars
    echo "<text>" >> ./${WORK}/$entry.xml
    cat ./logbook-tmp \
	| tr -d '[\000-\010][\013-\014][\016-\037][\177-\377]' \
	| sed 's/&/\&amp;/g' \
	| sed 's/>/\&gt;/g' \
	| sed 's/</\&lt;/g' \
	| sed 's/"/\&quot;/g'  \
	| sed "s/'/\&apos;/g" \
	>> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml

  ########################################
  # Postscript file
  elif test "PostScript" = $SW ; then
    mv ./logbook-tmp ./${WORK}/$tmp.ps
    # replace dummy "^M" by "\n"(solves problems with Tektronix PS files)
    cat ./${WORK}/$tmp.ps | tr '\015' '\n'  > ./${WORK}/$entry.ps
    /bin/rm -f ./${WORK}/$tmp.ps
        
    # Get values of the %%BoundingBox
    PORT=`grep %%BoundingBox: ./${WORK}/$entry.ps`
    CHECK=`echo $PORT | cut -c1-14`
    if test $CHECK ; then
      SEC=`echo $PORT | cut -f2 -d: | cut -f2 -d' '`
      if test "(atend)" = $SEC ; then
        PORT=`echo $PORT | cut -f3- -d' '`
      fi
      X1=`echo $PORT | cut -f2 -d: | cut -f2 -d' '`
      Y1=`echo $PORT | cut -f2 -d: | cut -f3 -d' '`
      X2=`echo $PORT | cut -f2 -d: | cut -f4 -d' '`
      Y2=`echo $PORT | cut -f2 -d: | cut -f5 -d' '`
      echo "    BoundingBox: X1=$X1 Y1=$Y1 X2=$X2 Y2=$Y2"
	if test -z "$X1" -o -z "$X2" -o -z "$Y1" -o -z "$Y2" ; then
        	echo "    Bad Bounding box"
        	convert_files 
	else
      	   # rotate only when landscape AND wider then 700
      	   if test $X2 -lt $Y2 && test $Y2 -gt 771 ; then
        	echo "    NO rotation done"
        	convert_files 
      	   else
		# Special for ROOT graphics (whats wrong with them???)
		CREATOR=`grep "%%Creator: ROOT" ./${WORK}/$entry.ps`
		if test "X" = "X$CREATOR" ; then
		  echo "    Rotation 90deg"
		  convert_files "-rotate 90"
		else
		  # Do NO rotation on ROOT graphics
		  echo "    Creator: ROOT -> No rotation done"
		  convert_files
		fi
      	   fi
	fi
    else
      echo "    NO BoundingBox"
      XPRINT=`grep "%%Creator: The X Print Server" ./${WORK}/$entry.ps`
      if test "X" = "X$XPRINT" ; then
	convert_files
      else
	XPRINT="true"
	convert_files
      fi
	
    fi
    echo "<link>$entry.ps</link>" >> ./${WORK}/$entry.xml
    echo "<text></text>" >> ./${WORK}/$entry.xml

  ########################################
  # SUN raster file
  elif test "rasterfile," = $SW ; then
    echo "  SUN rasterfile"
    mv ./logbook-tmp ./${WORK}/$zeit.rs
    convert  $CROP $FACTOR ./${WORK}/$zeit.rs ./${WORK}/$zeit-%02d.${THUMB}
    echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    echo "<link>$entry.ps</link>" >> ./${WORK}/$entry.xml
    echo "<text>" >> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml

  ########################################
  # JPEG file
  elif test "JPEG" = $SW ; then
    echo "  JPEG file"
    mv ./logbook-tmp ./${WORK}/$entry.JPG
    convert  $CROP $FACTOR ./${WORK}/$entry.JPG ./${WORK}/$zeit-%02d.${THUMB}
    echo "<link>$entry.JPG</link>" >> ./${WORK}/$entry.xml
    echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    echo "<text>" >> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml

  ########################################
  # Unsupported format
  else
    echo "  Wrong format $SW"
    echo "<text>" >> ./${WORK}/$entry.xml
    echo "Wrong data format: $SW" >> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml
    mv ./logbook-tmp ./bad_files/$zeit-tmp
  fi
  
  # Done with file creation - move them to data path
  deploy_files
  
  # clean up
  for EXT in "lpr" "tmp" "str" "tail" "in"; do
    if test -f $LOGB_DIR/logbook-${EXT} ; then
      /bin/rm -f $LOGB_DIR/logbook-${EXT}
    fi
  done

  echo "ENTRY CREATION DONE (`date`)"
done;
}

# Run loop as function to catch PID of subshell
{ (runloop >&3 3>&- & echo $!); } 3>&1 > $LOGB_DIR/log/lplisten.pid
