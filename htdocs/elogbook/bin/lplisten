#! /bin/sh
### BEGIN INIT INFO
# Provides:          lplisten
# Required-Start:    
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start lplisten daemon
# Description:       lplisten daemon is used for saving documents sent to
#		     the elogbook's virtual printer in logbook's data
#		     repository.
### END INIT INFO

# Author: Konrad Gajewski <konrad.gajewski@tsl.uu.se>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script

INIT_VERBOSE=yes

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Elogbook's virtual printer listener"

#Change variables below
RUNASUSER=__TOMCAT_USER__
NAME=__PRINTER_NAME__
BASE_DIR=__BASE_DIRECTRORY__
#end changes

PRG_NAME=lplisten
PIDFILE=$BASE_DIR/log/${PRG_NAME}.pid
DAEMON=$BASE_DIR/$PRG_NAME

SCRIPTNAME=/etc/init.d/$NAME
#echo $DAEMON

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
[ -r $BASE_DIR/../elogbook/bin/elogenv.sh ] && . $BASE_DIR/../elogbook/bin/elogenv.sh

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	UGID=$(getent passwd $RUNASUSER | cut -f 3,4 -d:) || true
	if [ -z "$UGID" ]; then
		log_failure_msg "user \"$RUNASUSER\" does not exist"
		exit 1
	fi
	
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $UGID --startas $DAEMON \
	    -- >> $BASE_DIR/log/$PRG_NAME.log
	RES=$?
	if [ $RES = 1 ]; then 
	    return 1
	fi

#	start-stop-daemon --start --pidfile $PIDFILE --chuid $UGID --exec $DAEMON  \
#		-- >> $BASE_DIR/log/$PRG_NAME.log || return 2

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
	chown $UGID $BASE_DIR/log/$PRG_NAME.log
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop  --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $PRG_NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
#	start-stop-daemon --stop --oknodo --retry=0/30/KILL/5 --exec $DAEMON
#	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}


case "$1" in
  start)

	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$DAEMON"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$DAEMON"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$DAEMON"
	do_stop
	case "$?" in
	  0|1)
		sleep 1
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac
