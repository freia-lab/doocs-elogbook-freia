#!/bin/sh
#
# This script is listening on the logbook printer queue
# The comand to start this script is <full_path>/lplisten
#
VERSION="2.0"

cd `dirname $0`

#LOGBOOK_TOP=/export/web/htdocs
LOGBOOK_TOP=/var/www
ELOG_BIN=${LOGBOOK_TOP}/elogbook/bin
PARSE_XML=${ELOG_BIN}/GetXMLElement

#image parameters:
THUMB="jpg"
FACTOR="-geometry 600x500>"
FACTOR_2="-geometry 500x300>"
FACTOR_4="-geometry 200x100>"
CROP="-trim"

# Load enviroment for convert etc.
../elogbook/bin/elogenv.sh

CONF_XML="jsp/conf.xml"
WORK_XML="jsp/work.xml"

# printer pipe name
PIPE=`${PARSE_XML} printer ${CONF_XML}`
# abs path to root of data <logbook>/data
DATAPATH=`${PARSE_XML} datapath ${CONF_XML}`
DATADIR=$DATAPATH
# root of the logbook
ROOTDIR=`${PARSE_XML} docroot ${CONF_XML}`
# root of this elogbook rel. to ROOTDIR
LOGDIR=`${PARSE_XML} logroot ${CONF_XML}`
# data directory of this elogbook rel. to LOGDIR
# dir for tmp files
WORK=work
# The elog root dir
LOGB_DIR=`pwd`
# elogbook server name
HOST=`${PARSE_XML} host ${CONF_XML}`
# elogbook manager servlet
MANAGER=`${PARSE_XML} tree_servlet ${CONF_XML}`

date=`date`

#########################################
# convert_files convert_options
convert_files() {
  NFILES=`grep %%Pages: ./${WORK}/$entry.ps | cut -f2 -d: | tail -1`
  echo "  Number of pages: $NFILES"
  # More than two images -> scaling 1/4 x 1/4
  if test ${NFILES:=0} -gt 2 ; then
    convert $CROP $FACTOR  $1 ./${WORK}/$entry.ps ./${WORK}/$zeit-%02d.${THUMB}
    for JPGFILE  in `ls ./${WORK}/$zeit*.${THUMB}` ; do
      BASEFILE=`basename $JPGFILE`
      convert $CROP $FACTOR_4  $JPGFILE $JPGFILE
      echo "<file>$BASEFILE</file>" >> ./${WORK}/$entry.xml
    done
  # More than one image -> scaling 1/2 x 1/2
  elif test ${NFILES:=0} -gt 1 ; then
    convert $CROP $FACTOR  $1 ./${WORK}/$entry.ps ./${WORK}/$zeit-%02d.${THUMB}
    for JPGFILE  in `ls ./${WORK}/$zeit*.${THUMB}` ; do
      BASEFILE=`basename $JPGFILE`
      convert $CROP $FACTOR_2  $JPGFILE $JPGFILE
      echo "<file>$BASEFILE</file>" >> ./${WORK}/$entry.xml
    done
  # Only one image -> scaling 1/1 x 1/1
  else
    if test  "Xtrue" != "X$XPRINT" ; then
      convert $CROP $FACTOR  $1 ./${WORK}/$entry.ps ./${WORK}/$zeit-%02d.${THUMB}
      echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    else
      echo "    Created by xprint (600x600 dpi)"
      convert $CROP $FACTOR  -density 600x600  $1 ./${WORK}/$entry.ps ./${WORK}/$zeit-%02d.${THUMB}
      echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    fi
  fi
}

deploy_files(){
  echo "  Moving files to data path ..."
  for EXT in xml ps pdf ${THUMB} JPG; do
    if test -f ${WORK}/$entry.${EXT}; then
      mv ${WORK}/${zeit}*.${EXT} ${SHIFTABS}
      echo "    moved ${zeit}*.${EXT} to ${SHIFTABS}"
    fi
  done
  echo "  done moving files."
}

# main loop
JOBID=0
echo "START of $0 version $VERSION for $PIPE - `date`"
echo " Thumbnail format is ${THUMB}"
runloop ()
{
while { $TRUE;} do
  cd $LOGB_DIR
  # listen at the pipe until data arrives
  cat < ./${PIPE} > ./logbook-in;
  JOBID=`expr $JOBID + 1`
  echo "File reached @ `date` - JOBID: ${JOBID}"

  # act shift data path
  ACT_DIR=`${PARSE_XML} act_dir ${WORK_XML}`
  SHIFTURI=${LOGDIR}${DATADIR}${ACTDIR}
  SHIFTABS=${ROOTDIR}${LOGDIR}${DATADIR}${ACT_DIR}

  # get the author, host and title, which are generated by the
  # script /etc/lp/interfaces/"PRINTER"
  if test -f /etc/lp/interfaces/${PIPE}-user.txt ; then
    STRING=`cat /etc/lp/interfaces/${PIPE}-user.txt`
    AUTHOR=`echo $STRING | cut -f1 -d@`
    LPHOST=`echo $STRING | cut -f2 -d@`
  else
    echo "  Error: File /etc/lp/interfaces/${PIPE}-user.txt does not exist"
    AUTHOR="PrintMeta"
    LPHOST="unknown"
  fi
  
  if test -f /etc/lp/interfaces/${PIPE}-title.txt ; then
    TSTRING=`head -n 1 /etc/lp/interfaces/${PIPE}-title.txt`
    if  test "Xstandard input" = "X$TSTRING"  ; then
      TSTRING="" # set to NULL string	
    fi
  else
    echo "  Error: File /etc/lp/interfaces/${PIPE}-title.txt does not exist"
    TSTRING="" # set to NULL string
  fi
  taildone=0

  # Used for file name (format: 2003-05-06T18:30:00-00)
  zeit=`date '+%Y-%m-%dT%H:%M:%S'`
  entry=${zeit}-00
  uhr=`date '+%H:%M:%S'`
  isodate=`date '+%Y-%m-%d'`

  PWD=`pwd`
  BASE=`basename $PWD`

  # This test coudln't handle a variable banner size
  LPerror=`head -n 1 ./logbook-in`
  if  test "X#####" = "X$LPerror"; then
    tail -n20 ./logbook-in > ./logbook-lpr
    taildone=1
  elif test "X%!PS-Adobe-3.0" = "X$LPerror"; then 
    echo "  Postscript with leading CR"
    tail -c +2 ./logbook-in > ./logbook-lpr
    taildone=1
  else
    echo "No header or banner found"
    cp -p ./logbook-in ./logbook-lpr
  fi
		
  # remove "^D" character (first one)  from file
  if test $taildone = 0; then
    tail -c +2 ./logbook-lpr > ./logbook-tail
  else
    mv ./logbook-lpr ./logbook-tail
  fi

  # avoid files created/printed from a WINDOWS PC with
  # HP printer driver
  HPerror=`head -n 1 ./logbook-tail`
  if  test "X%-12345X@PJL JOB" = "X$HPerror"  ; then
    echo "  Windows File created with HP driver"
    tail -c +2 ./logbook-tail > ./logbook-tmp
    PSHEAD=`head -n 1 ./logbook-tmp | cut -c1-4`
    while ( test "%!PS" != $PSHEAD ) do
      i=`expr $i + 1`
      tail -c +$i ./logbook-tail > ./logbook-tmp
      PSHEAD=`head -n 1 ./logbook-tmp | cut -c1-4`
    done
    taildone=1
  else
    mv ./logbook-tail ./logbook-tmp
  fi
  
  # Check if it is image or text data
  FILETYPE=`file ./logbook-tmp | cut -f2 -d: | cut -f1 -d' ' | tr -d [[:space:]]`
  echo "  File format is: $FILETYPE"
  if test "text" = $FILETYPE || test "English" = $FILETYPE ; then
    FILETYPE="ascii"
  fi

  # create .xml file, the closing tag for <text> must be
  # in every elif statement
  touch ./${WORK}/$entry.xml
  echo "<author>$AUTHOR</author>" >> ./${WORK}/$entry.xml
  echo "<category>USERLOG</category>" >> ./${WORK}/$entry.xml
  if test "x$TSTRING" = "x" ;then
    echo "<title>from: $LPHOST</title>" >> ./${WORK}/$entry.xml
  else
    echo "<title>$TSTRING</title>" >> ./${WORK}/$entry.xml
  fi
  echo "<isodate>$isodate</isodate>" >> ./${WORK}/$entry.xml
  echo "<time>$uhr</time>" >> ./${WORK}/$entry.xml
  echo "<severity>NONE</severity>" >> ./${WORK}/$entry.xml
  echo "<keywords></keywords>" >> ./${WORK}/$entry.xml
  echo "<location></location>" >> ./${WORK}/$entry.xml
  if test "ascii" = $FILETYPE || test "English" = $FILETYPE ; then
    echo "<metainfo>$entry.xml</metainfo>" >> ./${WORK}/$entry.xml
  else
    echo "<metainfo>$entry.xml</metainfo>" >> ./${WORK}/$entry.xml
  fi
  
  ########################################
  # ASCII file
  if test "ascii" = $FILETYPE || test "English" = $FILETYPE ; then
    # insert the text normalize HTML entities
    printf "<text>" >> ./${WORK}/$entry.xml
    cat ./logbook-tmp \
	| tr -d '[\000-\010][\013-\014][\016-\037][\177-\377]' \
	| sed 's/&/\&amp;/g' \
	| sed 's/>/\&gt;/g' \
	| sed 's/</\&lt;/g' \
	| sed 's/"/\&quot;/g'  \
	| sed "s/'/\&apos;/g" \
	>> ./${WORK}/$entry.xml  
    echo "</text>" >> ./${WORK}/$entry.xml

  ########################################
  # XML file
  elif test "XML" = $FILETYPE || test "xml" = $FILETYPE ; then
    fchars=`tail -c +2 ./logbook-tmp | head -n 1 | cut -c1-11`
    if test "X$fchars" = "X<entry>" ; then
      echo "  XML elogbook entry"
      echo "  Calling parser script ..."
      entry=`parse_elog_xml.pl $LOGDIR logbook-tmp`
      echo "done with XML file"
  else
    echo "  Unknown $FILETYPE filetype"
    printf "<text>" >> ./${WORK}/$entry.xml
    echo "Unknow $FILETYPE file type" >> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml
  fi

  ########################################
  # Postscript file
  elif test "PostScript" = $FILETYPE ; then
    mv ./logbook-tmp ./${WORK}/$tmp.ps
    # replace dummy "^M" by "\n"(solves problems with Tektronix PS files)
    cat ./${WORK}/$tmp.ps | tr '\015' '\n'  > ./${WORK}/$entry.ps
    /bin/rm -f ./${WORK}/$tmp.ps
        
    # Get values of the %%BoundingBox
    PORT=`grep %%BoundingBox: ./${WORK}/$entry.ps`
    CHECK=`echo $PORT | cut -c1-14`
    if test $CHECK ; then
      SEC=`echo $PORT | cut -f2 -d: | cut -f2 -d' '`
      if test "(atend)" = $SEC ; then
        PORT=`echo $PORT | cut -f3- -d' '`
      fi
      X1=`echo $PORT | cut -f2 -d: | cut -f2 -d' '`
      Y1=`echo $PORT | cut -f2 -d: | cut -f3 -d' '`
      X2=`echo $PORT | cut -f2 -d: | cut -f4 -d' '`
      Y2=`echo $PORT | cut -f2 -d: | cut -f5 -d' '`
      echo "    BoundingBox: X1=$X1 Y1=$Y1 X2=$X2 Y2=$Y2"
	if test -z "$X1" -o -z "$X2" -o -z "$Y1" -o -z "$Y2" ; then
        	echo "    Bad Bounding box"
        	convert_files 
	else
      	   # rotate only when landscape AND wider then 700
      	   if test $X2 -lt $Y2 && test $Y2 -gt 771 ; then
        	echo "    NO rotation done"
        	convert_files 
      	   else
		# Special for ROOT graphics (whats wrong with them???)
		CREATOR=`grep "%%Creator: ROOT" ./${WORK}/$entry.ps`
		if test "X" = "X$CREATOR" ; then
		  echo "    Rotation 90deg"
		  convert_files "-rotate 90"
		else
		  # Do NO rotation on ROOT graphics
		  echo "    Creator: ROOT -> No rotation done"
		  convert_files
		fi
      	   fi
	fi
    else
      echo "    NO BoundingBox"
      XPRINT=`grep "%%Creator: The X Print Server" ./${WORK}/$entry.ps`
      if test "X" = "X$XPRINT" ; then
	convert_files
      else
	XPRINT="true"
	convert_files
      fi
	
    fi
    echo "<link>$entry.ps</link>" >> ./${WORK}/$entry.xml
    echo "<text></text>" >> ./${WORK}/$entry.xml

  ########################################
  # PDF file
  elif test "Adobe" = $FILETYPE ; then
    echo "  PDF file"
    mv ./logbook-tmp ./${WORK}/$entry.pdf
    convert  $CROP $FACTOR ./${WORK}/$entry.pdf ./${WORK}/$zeit-%02d.${THUMB}
    echo "<link>$entry.pdf</link>" >> ./${WORK}/$entry.xml
    echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    printf "<text>" >> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml

  ########################################
  # SUN raster file
  elif test "rasterfile," = $FILETYPE ; then
    echo "  SUN rasterfile"
    mv ./logbook-tmp ./${WORK}/$entry.rs
    convert  $CROP $FACTOR ./${WORK}/$entry.rs ./${WORK}/$zeit-%02d.${THUMB}
    echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    echo "<link>$entry.ps</link>" >> ./${WORK}/$entry.xml
    printf "<text>" >> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml

  ########################################
  # JPEG file
  elif test "JPEG" = $FILETYPE ; then
    echo "  JPEG file"
    mv ./logbook-tmp ./${WORK}/$entry.JPG
    convert  $CROP $FACTOR ./${WORK}/$entry.JPG ./${WORK}/$zeit-%02d.${THUMB}
    echo "<link>$entry.JPG</link>" >> ./${WORK}/$entry.xml
    echo "<file>$entry.${THUMB}</file>" >> ./${WORK}/$entry.xml
    printf "<text>" >> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml

  ########################################
  # Unsupported format
  else
    echo "  Wrong format $FILETYPE"
    echo "<text>" >> ./${WORK}/$entry.xml
    echo "Wrong data format: $FILETYPE" >> ./${WORK}/$entry.xml
    echo "</text>" >> ./${WORK}/$entry.xml
    mv ./logbook-tmp ./bad_files/$zeit-tmp
  fi
  
  ########################################
  # Done with file creation - move them to data path
  deploy_files

  ########################################
  # Mark elogbook folder as filled 
  # e.g. wget -q --spider "http://ttfinfo.desy.de/elogbookManager/Manager?name=TTFelog&fill=/2009/44/27.10"
  ELOGNAME=`echo ${LOGDIR} | tr -d '/'`
  wget -q --spider  "${HOST}${MANAGER}?name=${ELOGNAME}&fill=${ACT_DIR}"
  #echo "Marked ${ACT_DIR} folder as filled" 

  ########################################
  # Update search index
  wget -q --spider "${HOST}:8080${SEARCH_SERVLET}?logbook=${ELOGNAME}&path=${DATADIR}${ACT_DIR}/$entry.xml"
  FRAG_TMP=`echo "${DATADIR}${ACT_DIR}/$entry.xml" | tr -s '/' '='`
  FRAGMENT=/var/tmp/elogbook/fragments/${ELOGNAME}${FRAG_TMP}-add
  touch ${FRAGMENT}
  #echo "Created fragment: "
  #ls -la ${FRAGMENT}
  #$LOGB_DIR/bin/search-index add $SHIFTABS/$zeit-00.xml

  ########################################
  # clean up
  for EXT in "lpr" "tmp" "str" "tail" "in"; do
     if test -f $LOGB_DIR/logbook-${EXT} ; then
       /bin/rm -f $LOGB_DIR/logbook-${EXT}
     fi
  done

  echo "File created @ `date` - JOBID: ${JOBID}"
done;
}

# Run loop as function to catch PID of subshell
{ (runloop >&3 3>&- & echo $!); } 3>&1 > $LOGB_DIR/log/lplisten.pid
